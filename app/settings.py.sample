# -*- coding: utf-8 -*-

import os
import datetime
from datetime import timedelta

with open("VERSION") as v_file:
    PATROWL_VERSION = v_file.read()

# GUI update frequency (ms)
PATROWL_REFRESH_ENGINE = os.environ.get('PATROWL_REFRESH_ENGINE', 7000)

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', '*** omg this is the secret !***')
CSRF_COOKIE_SECURE = True
CSRF_USE_SESSIONS = True

#SESSION_COOKIE_SECURE = True # Only if HTTPS is enabled
SESSION_COOKIE_HTTPONLY = True
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True
SECURE_HSTS_PRELOAD = True
SECURE_HSTS_SECONDS = 3600 # 1 hour (for testing only, otherwise, set 31536000)
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
#SECURE_SSL_REDIRECT = False # Dev/test environment
SECURE_SSL_REDIRECT = os.environ.get('SECURE_SSL_REDIRECT', '').lower() in ['true', '1', 'yes', 'y', 'on']
#X_FRAME_OPTIONS = 'DENY'

USE_X_FORWARDED_HOST = os.environ.get('USE_X_FORWARDED_HOST', 'true').lower() in ['true', '1', 'yes', 'y', 'on']
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', '').lower() in ['true', '1', 'yes', 'y', 'on']   # Production environment

ALLOWED_HOSTS = ['*'] # /!\ Not safe for production environment

LOGGING_LEVEL = os.environ.get('LOGGING_LEVEL', 'INFO,WARNING,ERROR,DEBUG')

DATA_UPLOAD_MAX_NUMBER_FIELDS = 20240

PROXIES = {
    "http": os.environ.get('PATROWL_PROXY_HTTP', None),
    "https": os.environ.get('PATROWL_PROXY_HTTPS', None)
}

INTERNAL_IPS = ALLOWED_HOSTS

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    'django_dbconn_retry',
    'reset_migrations',
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_swagger',
    'corsheaders',
    'django_filters',
    'datetimewidget',
    'organizations',
    'annoying',

    'scans',
    'engines',
    'findings',
    'assets',
    'users',
    'events',
    'rules',
    'search',
    'reportings',
    'settings',
    # 'debug_toolbar',
    'django_celery_results',
    'django_celery_beat',
    'health_check',
    'health_check.contrib.celery',
    'health_check.contrib.psutil',
    'health_check.contrib.rabbitmq',
]

HEALTH_CHECK = {
    'DISK_USAGE_MAX': 90,
    'MEMORY_MIN': 256,
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.middleware.gzip.GZipMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    #'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'users.middleware.RequireLoginMiddleware',
    #'django.middleware.clickjacking.XFrameOptionsMiddleware',
    #'debug_toolbar.middleware.DebugToolbarMiddleware',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_FILTER_BACKENDS': (
          'django_filters.rest_framework.DjangoFilterBackend',
      ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 100
}

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True

SIMPLE_JWT = {
    # 'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=80000),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,

    'AUTH_HEADER_TYPES': ('Bearer', 'JWT',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

LOGIN_REQUIRED_URLS = (
    r'/(.*)$',
)
LOGIN_REQUIRED_URLS_EXCEPTIONS = (
    r'/auth-jwt/(.*)$',
    r'/login(.*)$',
    r'/logout(.*)$',
    r'/signup$',
    r'/static/(.*)$',
    r'/(.*)/api/(.*)$',
    r'/admin/jsi18n/(.*)$',
    r'/api-pro/(.*)$',
)

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]

LOGIN_URL = '/login'
LOGOUT_URL = '/logout'
LOGIN_REDIRECT_URL = '/dashboard'
LOGOUT_REDIRECT_URL = '/login'
APPEND_SLASH = False

ROOT_URLCONF = 'app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ["templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'app.context_processors.selected_settings',
            ],
            'libraries': {
                'patrowl_tags': 'templatetags.common_tags'
            }
        },
    },
]

WSGI_APPLICATION = 'app.wsgi.application'

CONN_MAX_AGE = os.environ.get('DB_ENV_POSTGRES_CONN_MAX_AGE', '0').lower()
if CONN_MAX_AGE == 'none':
    CONN_MAX_AGE = None
else:
    CONN_MAX_AGE = int(CONN_MAX_AGE)

# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.environ.get('DB_ENV_DB', 'patrowl_db'),
        'USER': os.environ.get('DB_ENV_POSTGRES_USER', 'PATROWL_DB_USER'),
        'PASSWORD': os.environ.get('DB_ENV_POSTGRES_PASSWORD', 'PATROWL_DB_PASSWD_TO_CHANGE'),
        'HOST': os.environ.get('DB_PORT_5432_TCP_HOST', 'localhost'),
        'PORT': os.environ.get('DB_PORT_5432_TCP_PORT', ''),
        'OPTIONS': {
            'options': os.environ.get('DB_ENV_POSTGRES_OPTIONS', '')
        },
        'CONN_MAX_AGE': CONN_MAX_AGE
    }
}

# Using a connection pooler in transaction pooling mode (e.g. pgBouncer) requires disabling server-side cursors for that connection.
DISABLE_SERVER_SIDE_CURSORS = os.environ.get('DISABLE_SERVER_SIDE_CURSORS', '').lower() in ['true', '1', 'yes', 'y', 'on']


# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = os.environ.get('PATROWL_TZ', 'Europe/Paris')
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Scan timeout
SCAN_TIMEOUT = os.environ.get('SCAN_TIMEOUT', 600)

# RABBITMQ
RABBIT_HOSTNAME = os.environ.get('RABBIT_PORT_5672_TCP', 'localhost:5672')

if RABBIT_HOSTNAME.startswith('tcp://'):
    RABBIT_HOSTNAME = RABBIT_HOSTNAME.split('//')[1]

BROKER_URL = os.environ.get('BROKER_URL', '')
if BROKER_URL == "":
    BROKER_URL = 'amqp://{user}:{password}@{hostname}/{vhost}/'.format(
        user=os.environ.get('RABBIT_ENV_USER', 'guest'),
        password=os.environ.get('RABBIT_ENV_PASS', 'guest'),
        hostname=RABBIT_HOSTNAME,
        vhost=os.environ.get('RABBIT_ENV_VHOST', ''))

# Celery+RabbitMQ tuning
BROKER_HEARTBEAT = None
BROKER_POOL_LIMIT = 1
BROKER_CONNECTION_TIMEOUT = 30
# BROKER_HEARTBEAT = '?heartbeat=30'
# if not BROKER_URL.endswith(BROKER_HEARTBEAT):
#     BROKER_URL += BROKER_HEARTBEAT
# BROKER_POOL_LIMIT = None

# CELERY
#CELERY_RESULT_BACKEND = None
CELERY_RESULT_BACKEND = 'django-db'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = os.environ.get('PATROWL_TZ', 'Europe/Paris')
# CELERY_ENABLE_UTC = False
# CELERY_IGNORE_RESULT = True
# CELERY_TASK_IGNORE_RESULT = True
# CELERYD_TASK_SOFT_TIME_LIMIT = 60
# CELERY_TASK_RESULT_EXPIRES = 300
CELERY_ACKS_LATE = True
# CELERY_BEAT_SCHEDULE = {}


# Email settings
#EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', True)
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'true').lower() in ['true', '1', 'yes', 'y', 'on']
# EMAIL_USE_SSL = os.environ.get('EMAIL_USE_SSL', '').lower() in ['true', '1', 'yes', 'y', 'on']
EMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.gmail.com')
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', 'test@gmail.com')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', 'test')
EMAIL_PORT = os.environ.get('EMAIL_PORT', 587)

# Monitoring APIs
SUPERVISORD_API_URL = 'http://localhost:9001/RPC2'
CELERYFLOWER_API_URL = 'http://localhost:5555/api/'

# More settings
HTTP_REQUEST_MAX_TIMEOUT = int(os.environ.get('HTTP_REQUEST_MAX_TIMEOUT', 600))
SCAN_JOB_DEFAULT_MAX_TIMEOUT = int(os.environ.get('SCAN_JOB_DEFAULT_MAX_TIMEOUT', 600))
SCAN_JOB_DEFAULT_TIMEOUT = int(os.environ.get('SCAN_JOB_DEFAULT_TIMEOUT', 7200))
ASSETS_MAX = os.environ.get('PATROWL_ASSETS_MAX', 100000000)
ASSETS_MARGIN = os.environ.get('PATROWL_ASSETS_MARGIN', 10)
ASSETGROUPS_MAX = os.environ.get('PATROWL_ASSETGROUPS_MAX', 100000000)
USERS_MAX = os.environ.get('PATROWL_USERS_MAX', 5)
SCAN_DEFINITIONS_MAX = os.environ.get('PATROWL_SCAN_DEFINITIONS_MAX', 5)
FINDINGS_MAX = os.environ.get('PATROWL_FINDINGS_MAX', -1)
ENGINES_MAX = os.environ.get('PATROWL_ENGINES_MAX', 5)
ENGINE_POLICIES_MAX = os.environ.get('PATROWL_ENGINE_POLICIES_MAX', 100)
ENGINES_MANAGE_ENABLED = os.environ.get('PATROWL_ENGINES_MANAGE_ENABLED', True)

## Pro edition - Load extra settings
PRO_EDITION = os.environ.get('PRO_EDITION', "").lower() in ['true', '1', 'yes', 'y', 'on']
if PRO_EDITION is True and os.path.isdir('pro'):
    try:
        from pro.settings import *
        INSTALLED_APPS += PRO_INSTALLED_APPS
        MIDDLEWARE += PRO_MIDDLEWARE
        # CELERY_BEAT_SCHEDULE.update(PRO_CELERY_BEAT_SCHEDULE)
        AUTHENTICATION_BACKENDS += PRO_AUTHENTICATION_BACKENDS
        L_LRUE = list(LOGIN_REQUIRED_URLS_EXCEPTIONS)
        L_LRUE.append(PRO_LOGIN_REQUIRED_URLS_EXCEPTIONS)
        LOGIN_REQUIRED_URLS_EXCEPTIONS = tuple(L_LRUE)

    except ImportError:
        pass
